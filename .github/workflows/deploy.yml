name: Build‑Push‑Deploy

on:
  push:
    branches: [main]
    paths-ignore:
      - .github/workflows/deploy.yml

permissions:
  contents: read
  id-token: write

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
  IMAGE_TAG: ${{ github.sha }}

jobs:
  unit-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 23

      - name: Run unit tests
        continue-on-error: true
        run: mvn test

  build-and-push:
    runs-on: ubuntu-latest

    steps:
      # ─── Checkout source ────────────────────────────────────────────────────────
      - uses: actions/checkout@v4

      # ─── Set up JDK + Maven cache ──────────────────────────────────────────────
      - uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "23"

      # (Optional) cache ~/.m2 to speed up
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-

      # ─── Login to ECR ──────────────────────────────────────────────────────────
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        run: aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY

      # ─── Build & tag image ─────────────────────────────────────────────────────
      - name: Build Docker image
        run: |
          docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest

      # ─── Push tags ─────────────────────────────────────────────────────────────
      - name: Push Docker image to ECR
        run: |
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Add SSH key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy on EC2
        env:
          AWS_REGION: ${{ env.AWS_REGION }}
          ECR_REGISTRY: ${{ env.ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
          IMAGE_TAG: latest
          # IMAGE_TAG: ${{ env.IMAGE_TAG }}
          DB_URL: ${{ secrets.DB_URL }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
          REDIS_HOST: ${{ secrets.REDIS_HOST }}
          REDIS_PORT: ${{ secrets.REDIS_PORT }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

        run: |
          ssh -o StrictHostKeyChecking=no -o ConnectTimeout=30 ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << EOF
            echo "Successfully connected to EC2. Running deployment script..."

            # ── 0. Export credentials for this shell ──────────────────────────
            export AWS_ACCESS_KEY_ID="${AWS_ACCESS_KEY_ID}"
            export AWS_SECRET_ACCESS_KEY="${AWS_SECRET_ACCESS_KEY}"
            export AWS_DEFAULT_REGION="${AWS_REGION}"

            export ECR_REGISTRY="${ECR_REGISTRY}"
            export ECR_REPOSITORY="${ECR_REPOSITORY}"
            # export IMAGE_TAG="${IMAGE_TAG}"

            # app‑specific envs
            export DB_URL="${DB_URL}"
            export DB_USERNAME="${DB_USERNAME}"
            export DB_PASSWORD="${DB_PASSWORD}"
            export JWT_SECRET="${JWT_SECRET}"
            export MAIL_PASSWORD="${MAIL_PASSWORD}"
            export REDIS_HOST="${REDIS_HOST}"
            export REDIS_PORT="${REDIS_PORT}"

            # ─── 1. Login to ECR ──────────────────────────────────────────────
            echo ":: Logging in to ECR \$ECR_REGISTRY"
            aws ecr get-login-password --region "$AWS_REGION" | sudo docker login --username AWS --password-stdin "$ECR_REGISTRY"

            # ─── 2. Pull latest image ─────────────────────────────────────────
            IMAGE="\$ECR_REGISTRY/\$ECR_REPOSITORY:latest"
            echo ":: Pulling \$IMAGE"
            sudo docker pull "\$IMAGE"

            # ─── 3. Create network if necessary ───────────────────────────────
            sudo docker network inspect internal-network >/dev/null 2>&1 \
              || sudo docker network create internal-network

            # ─── 4. Stop old container (if any) ───────────────────────────────
            sudo docker rm -f buildbetter-backend || true
            
            echo ":: Starting new container"
            sudo docker run -d --name buildbetter-backend --network internal-network \
              -p 8080:8080 \
              -e DB_URL="$DB_URL" \
              -e DB_USERNAME="$DB_USERNAME" \
              -e DB_PASSWORD="$DB_PASSWORD" \
              -e JWT_SECRET="$JWT_SECRET" \
              -e MAIL_PASSWORD='$MAIL_PASSWORD' \
              -e REDIS_HOST="$REDIS_HOST" \
              -e REDIS_PORT="$REDIS_PORT" \
              "\$IMAGE"
              
            # sudo docker run -p 8080:8080 --network internal-network --name buildbetter-backend -e DB_URL=$DB_URL -e DB_USERNAME=$DB_USERNAME -e DB_PASSWORD=$DB_PASSWORD -e JWT_SECRET=$JWT_SECRET -e MAIL_PASSWORD=$MAIL_PASSWORD -e REDIS_HOST=$REDIS_HOST -e REDIS_PORT=$REDIS_PORT "\$IMAGE"

            echo ":: Deployed \$IMAGE"
          EOF
